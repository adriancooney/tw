#!/usr/bin/env babel-node --
import moment from "moment";
import handlebars from "handlebars";
import Teamwork from "../src/Teamwork";
import TeamworkCLI, { CLIError } from "../src/TeamworkCLI";
import Command from "../src/library/Command";
import { Debug } from "../src/library/Debug";
import { Log } from "../src/model";

const debug = Debug("tw:cmd:log");

export default class LogCommand extends Command {
    setup(command) {
        command
            .description("Log time to a project, tasklist or task.")
            .option("-d, --duration <duration>", "Specify the duration of the log.")
            .option("-F, --fill", "Log the time since your last log today.")
            .option("-m, --message <message>", "Specify the log message.")
            .option("-p, --project <project>", "Log the time to a project.")
            .option("-s, --tasklist <tasklist>", "Log the time to a tasklist.")
            .option("-t, --task <task>", "Log the time to a task.")
            .option("-P, --current-project", "Log the time to the current project.")
            .option("-S, --current-tasklist", "Log the time to the current tasklist.")
            .option("-T, --current-task", "Log the time to the current task.")
            .option("--time <time>", "Set the start time of the log")
            .option("--date <date>", "Set the date of the log.")
            .option("--timestamp <timestamp>", "Set the start timestamp (Unix).");
    }

    execute(options) {
        // Ensure we have *at least* a duration or --fill
        if(!options.duration && !options.fill) 
            throw new CLIError(`Please provide a ${this.color.option("-d, --duration>")}.`);

        return this.getAPI().then((api) => {
            var item;

            // Find the item they want to log the time to
            ["task", "tasklist", "project"].forEach((type) => {
                if(item && (options[type] || options[`current-${type}`]))
                    throw new CLIError(`Clashing log targets. Please only specify a task ${this.color.option("-t")}, tasklist ${this.color.option("-s")} or project ${this.color.option("-p")}.`);

                // They passed in an explicit task, tasklist or project
                if(options[type]) {
                    // Thank god for API consistency.
                    // Get the from the API the item type by Id. We query the API for the item to 
                    // see if it exists and to display information about what we just logged to.
                    item = api[`get${type[0].toUpperCase() + type.substr(1)}ByID`](Teamwork.parse(type, options[type]))
                } else if(options[`current-${type}`]) {
                    item = this.getCurrent(type);

                    if(!item)
                        throw new CLIError(`Current ${type} is not set. Please use ${this.color.command("tw select")} to pick a ${type}.`);
                }
            });

            return Promise.all([api, item]);
        }).spread((api, item) => {
            if(options.fill) {
                // The user asks us to fill the time since the last
                // time entry. It only does it for the current project
                // and if it's within the last day so we don't go
                // filling in weeks
                var currentProject = this.getCurrent("project"),
                    currentUser = this.getCurrent("user");

                return api.getLogs(currentProject, { 
                    user: currentUser, 
                    // TODO: Allow custom start of day to be input
                    // Get logs since today at 8:00AM
                    from: moment().startOf("day").subtract(4, "hour"),
                    to: moment()
                }).then((logs) => {
                    // Get the lastest time
                    var [timestamp, log] = logs.reduce(([lastTimestamp, lastLog], currentLog) => {
                        // Get the log start date and add it's duration
                        var currentTimestamp = moment(currentLog.date).add(currentLog.duration);

                        // If this is the first (or only), just return it
                        if(!lastTimestamp) return [currentTimestamp, currentLog];

                        // If it's after the lastest timestamp, it is now the new latest
                        if(currentTimestamp.isAfter(lastTimestamp)) return [currentTimestamp, currentLog];
                        else return [lastTimestamp, lastLog];
                    }, []);

                    // If we have no log today, cop out!
                    if(!log) 
                        throw new CLIError(`No recent time logs today. You can only ${this.color.option("--fill")} since your last time log today.`);

                    var diff = moment().diff(timestamp, "m");

                    // Check to make sure we actually have a time and it's greater than at *least* five minutes
                    if(diff < 5) 
                        throw new CLIError(`Your last log was ${timestamp.fromNow()}. It must be at least 5 minutes since your last log. Come on now, don't be silly.`);

                    const offset = timestamp, duration = moment.duration(diff, "m");

                    return [api, item, duration, offset];
                });
            } else {
                // We have out task/project, now let's parse out duration.
                var duration = options.duration;

                if(!duration) 
                    throw new CLIError("Please supply a task or duration to log.");

                // Parse the duration. This will fail if it's invaild.
                duration = Teamwork.parse("duration", duration);

                // Create the moment object
                duration = moment.duration(duration);

                // And the offset
                const offset = moment().subtract(duration);

                return [api, item, duration, offset];
            }
        }).spread((api, item, duration, offset) => {
            var message;

            // Get the message for the timelog via -m switch
            if(options.message) message = options.message;
            else {
                // Default to prompt for a message with $EDITOR
                message = TeamworkCLI.promptWithEditor(`Logging ${duration.humanize()} to ${item.toString()}.\n${item.getURL()}`);
            } 

            return [api, item, duration, offset, message];
        }).spread((api, item, duration, offset, message) => {
            if(!message.trim().length)
                throw new CLIError("Empty message. Aborting.", undefined, false);

            // Update any template variables in the message
            message = handlebars.compile(message)({ duration: duration.humanize() });

            var user = this.getCurrent("user");

            // Actually log the time with the API
            // Take a minute to realize the beauty that is the Moment API.
            return api.log(item, Log.create(moment.duration(duration), offset, user, message.trim()));
        }).then((log) => {
            TeamworkCLI.done(log.toString());
        });
    }
}

if(require.main === module)
    TeamworkCLI.run(LogCommand);