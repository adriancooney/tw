#!/usr/bin/env babel-node --

import program from "commander";
import Promise from "bluebird";
import moment from "moment";
import Teamwork from "../src/Teamwork";
import TeamworkCLI, { CLIError } from "../src/TeamworkCLI";
import TeamworkAPI, { LoginError } from "../src/TeamworkAPI";
import { Debug } from "../src/library/Debug";

const debug = Debug("tw:cmd:log");

Promise.try(() => {
    program
        .arguments("[task] <duration>")
        .option("-m, --message <message>", "Log time with a message")
        .option("-d, --duration <duration>", "The duration of the log.")
        .option("-t, --time <time>", "The time the log happened.")
        .option("--date <date>", "The date of the time log.")
        .option("--silent", "Don't prompt for a log message")
        .parse(process.argv);

    // Ensure we have *at least* a duration
    if(program.args.length === 0) throw new CLIError(`Please provide a ${TeamworkCLI.color.blue("<duration>")}.`);

    return TeamworkCLI.getAPI();
}).then((api) => {
    var task;

    // Get the task ID
    try {
        task = Teamwork.parseTask(program.args[0]);
    } catch(err) {
        debug("Invalid task %s, checking if duration.", program.args[0]);
    }

    if(task) {
        // We have a task ID, let's get it. Supplied tasks
        // always have precedence over the current task.
        return [api, api.getTaskByID(task)];
    } else {
        task = TeamworkCLI.getCurrent("task")

        if(!task) throw new CLIError(`Please specify a task or select your current task with ${TeamworkCLI.color.blue("tw tasks")}.`);
        else return [api, task];
    }
}).spread((api, task) => {
    // We have out task, now let's parse out duration.
    duration = program.args[1] || program.args[0];

    if(!duration) throw new CLIError("Please supply a task or duration to log.");

    // Parse the duration
    duration = Teamwork.parseDuration(duration);

    TeamworkCLI.log(`Logging ${duration.humanize()} to #${task.id}.`);

    return [api, task, duration];
}).spread((api, task, duration) => {
    var data = [api, task, duration];

    // Get the message for the timelog
    if(program.message) data.push({ message: program.message })
    else data.push(TeamworkCLI.prompt({
        type: "input",
        name: "message",
        message: "Message"
    }));
}).spread((api, task, duration, answers) => {
    var user = TeamworkCLI.getCurrent("user");

    // Actually log the time with the API
    // Take a minute to realize the beauty that is the Moment API.
    return api.log(task, user, duration, moment().subtract(duration), answers.message);
}).catch(TeamworkCLI.fail);

