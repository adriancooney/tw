#!/usr/bin/env babel-node --

import program from "commander";
import Promise from "bluebird";
import moment from "moment";
import Teamwork from "../src/Teamwork";
import TeamworkCLI, { CLIError } from "../src/TeamworkCLI";
import TeamworkAPI, { LoginError } from "../src/TeamworkAPI";
import { Debug } from "../src/library/Debug";

import { Log } from "../src/model";

const debug = Debug("tw:cmd:log");

TeamworkCLI.command(() => {
    program
        .arguments("[task] <duration>")
        .description("Log time to a task or project.")
        .option("-m, --message <message>", "Log time with a message.")
        .option("-e, --editor", "Open up the default editor to write the log message.")
        .option("-d, --duration <duration>", "The duration of the log.")
        .option("-t, --time <time>", "The time the log happened.")
        .option("-F, --fill", "Use the time since your last log as the duration.")
        .option("--date <date>", "The date of the time log.")
        .option("--silent", "Don't prompt for a log message.")
        .option("--project [project]", "Log the time to the specified or current project.")
        .parse(process.argv);

    // Ensure we have *at least* a duration or --fill
    if(program.args.length === 0 && !program.duration && !program.fill) throw new CLIError(`Please provide a ${TeamworkCLI.color.blue("<duration>")}.`);

    return TeamworkCLI.getAPI().then((api) => {
        var item;

        // If they specified a project, just get the project
        if(program.project) {
            if(typeof project === "string") {
                // We have a project ID
                item = Teamwork.getProjectByID(Teamwork.parseProject(program.project));
            } else {
                // Just a boolean, add to the current project
                item = TeamworkCLI.getCurrent("project");

                if(!item) throw new Error(`Please specify a project or select a current project with ${TeamworkCLI.color.blue("tw projects")}.`);
            }
        } else {
            try {
                // Get the task ID
                item = Teamwork.parseTask(program.args[0]);
            } catch(err) {
                // Since you can omit the task, we have to check if it's a duration
                debug("Invalid task %s, checking if duration.", program.args[0]);
            }

            if(item) {
                // We successfully parsed the task ID, let's get it. Supplied tasks
                // always have precedence over the current task.
                item = api.getTaskByID(item);
            } else {
                // No task, get the current
                item = TeamworkCLI.getCurrent("task")

                if(!item) throw new CLIError(`Please specify a task or select your current task with ${TeamworkCLI.color.blue("tw tasks")}.`);
            }
        }

        return [api, item];
    }).spread((api, item) => {
        if(program.fill) {
            // The user asks us to fill the time since the last
            // time entry. It only does it for the current project
            // and if it's within the last day so we don't go
            // filling in weeks
            var currentProject = TeamworkCLI.getCurrent("project"),
                currentUser = TeamworkCLI.getCurrent("user");

            return api.getLogs(currentProject, { 
                user: currentUser, 
                // TODO: Allow custom start of day to be input
                // Get logs since today at 8:00AM
                from: moment().startOf("day").subtract(4, "hour"),
                to: moment()
            }).then((logs) => {
                // Get the lastest time
                var [timestamp, log] = logs.reduce(([lastTimestamp, lastLog], currentLog) => {
                    // Get the log start date and add it's duration
                    var currentTimestamp = moment(currentLog.date).add(currentLog.duration);

                    // If this is the first (or only), just return it
                    if(!lastTimestamp) return [currentTimestamp, currentLog];

                    // If it's after the lastest timestamp, it is now the new latest
                    if(currentTimestamp.isAfter(lastTimestamp)) return [currentTimestamp, currentLog];
                    else return [lastTimestamp, lastLog];
                }, []);

                // If we have no log today, cop out!
                if(!log) throw new CLIError(`No recent time logs today. ${TeamworkCLI.color.blue("--fill")} will only fill since you last time log today (starting at 8:00am).`);

                var diff = moment().diff(timestamp, "m");

                // Check to make sure we actually have a time and it's greater than at *least* five minutes
                if(diff < 5) throw new CLIError(`Your last log was ${timestamp.fromNow()}. It must be at least 5 minutes since your last log. Come on now, don't be silly.`);

                var offset = timestamp, duration = moment.duration(diff, "m");

                return [api, item, duration, offset];
            });
        } else {
            // We have out task/project, now let's parse out duration.
            var duration = program.duration || program.args[1] || program.args[0];

            if(!duration) throw new CLIError("Please supply a task or duration to log.");

            // Parse the duration. This will fail if it's invaild.
            duration = Teamwork.parse("duration", duration);

            // Create the moment object
            duration = moment.duration(duration);

            // And the offset
            var offset = moment().subtract(duration);

            return [api, item, duration, offset];
        }
    }).spread((api, item, duration, offset) => {
        var message;

        // Get the message for the timelog
        if(program.message) message = program.message;
        else if(program.silent) message = "";
        else if(program.editor) {
            // Prompt for a message 
            message = TeamworkCLI.promptWithEditor(`Logging ${duration.humanize()} to #${item.toString()}.\n${item.getURL()}`);
        } else {
            message = TeamworkCLI.prompt({
                type: "input",
                name: "message",
                message: "Message"
            }).then((answers) => {
                return answers.message
            });
        }

        return [api, item, duration, offset, message]
    }).spread((api, item, duration, offset, message) => {
        var user = TeamworkCLI.getCurrent("user");

        // Actually log the time with the API
        // Take a minute to realize the beauty that is the Moment API.
        return api.log(item, user, Log.create(moment.duration(duration), offset, message.trim()));
    }).spread((log, result) => {
        TeamworkCLI.log(log.description());
    });
});