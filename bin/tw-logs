#!/usr/bin/env babel-node --
import moment from "moment";
import Promise from "bluebird";
import Teamwork from "../src/Teamwork";
import * as cli from "../src/cli";
import { CLIError } from "../src/cli/error";
import Command from "../src/library/Command";
import { Debug } from "../src/library/Debug";

const debug = Debug("tw:cli:logs");

export default class LogsCommand extends Command {
    setup(command) {
        command
            .description("View times logs for a project, tasklist or task.")
            .option("-e, --everyone", "View everyone's time logs for a project, tasklist or task.")
            .option("--yesterday", "View time logs created yesterday.")
            .option("--week", "View time logs created within the last week.")
            .option("--month", "View time logs created within the last month.")
            .option("--date <date>", "View time logs for a specific date.")
            .option("--since <timestamp>", "View time logs since a specific time (DD/MM/YYYY HH:mm).")
            .option("--to <timestamp>", "View time logs up until a specific time (DD/MM/YYYY HH:mm).")
            .option("--all", "View all time logs created.");

        this.addScopeOptions(command, "View time logs for");
    }

    execute(options) {
        return this.getAPI().then(api => {
            return [api, this.getScopeFromOptions(api, options)];
        }).spread((api, scope) => {
            const user = this.getCurrent("user");

            let to, from;
            if(!options.all) {
                // The end of the date range of the log (defaults to now)
                to = options.to ? moment(options.to, "DD/MM/YYYY HH:mm") : moment();
                // The start of the date range (defaults to today)
                from = moment().startOf("day").add(8, "hours"); // Moment's API is just beautiful.

                if(options.yesterday) {
                    to = moment(from);
                    from = from.subtract(1, "day");
                } else if(options.week) from = from.subtract(1, "week");
                else if(options.month) from = from.subtract(1, "month");
                else if(options.since) from = moment(options.since, "DD/MM/YYYY HH:mm");
                else if(options.date) {
                    from = moment(options.date, "D/M/YY");
                    to = moment(from).add(1, "day");
                }
            }

            debug("Getting time logs from %s to %s.", from.format(), to.format());

            // Get the tasks
            return [api.getLogs(scope, {
                user: !options.everyone ? user : undefined,
                from, to,
                sortOrder: "ASC"
            }), scope, from, to];
        }).spread((logs, scope, from, to) => {
            const timeRange = (from && to ? `${scope ? " for " + this.color.scope(scope.toString()) : ""} since ${from.calendar().toLowerCase()}` 
                    + `${options.to ? " until " + to.calendar().toLowerCase() : ""}` : "");

            // Log the task were getting the logs forr
            cli.output.log(`Viewing ${options.everyone ? "everyones" : "your"} time logs${timeRange}.\n`);

            if(logs.length) {
                const total = logs.reduce((total, log, i) => {
                    let logTarget = log.task || log.tasklist || log.project || scope;
                    let logOutput = this.color.yellow(`${cli.format.getScopeType(logTarget).toLowerCase()} ${logTarget.title}\n`);

                    logOutput += `${log.author.getNameInitialed()} logged ${cli.format.prettyDuration(log.duration)} ${log.date.calendar().toLowerCase()}\n\n`;

                    logOutput += cli.format.indent(log.description, cli.format.tab) + "\n";
                    cli.output.log(logOutput);
                    return total.add(log.duration);
                }, moment.duration());

                cli.output.log(`Total ${cli.format.prettyDuration(total)} minutes logged${timeRange}.`);
            } else {
                cli.output.log("No time logged.");
            }
        });
    }
}

if(require.main === module)
    cli.run(LogsCommand);