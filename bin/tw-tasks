#!/usr/bin/env babel-node

import program from "commander";
import TeamworkCLI, { CLIError } from "../src/TeamworkCLI";

const CHILD_NOTATION = " |- ";

TeamworkCLI.command(() => {
    program
        .option("-l, --list", "Display tasks as a static list.")
        .option("-f, --filter <string>", "Filter the tasks by title containing <string>.")
        .option("-a, --all", "Display completed tasks.")
        .parse(process.argv);

    return TeamworkCLI.getAPI().then((api) => {
        var tasklist = TeamworkCLI.getCurrent("tasklist");
        if(!tasklist) TeamworkCLI.fail(`No tasklist currently selected. Please select a tasklist with ${TeamworkCLI.color.green("tw tasklists")}.`);

        return api.getTasks(tasklist, {
            completed: program.all
        });
    }).then((tasks) => {
        // Flatten the task list
        tasks = tasks.reduce((list, task) => {
            list.push({ task, level: 0 });

            if(task.subTasks) {
                list = list.concat(task.subTasks.map((t) => { return { task: t, level: 1}; }));
            }

            return list;
        }, []);

        // Create the filter if we have one
        var filter;

        try {
            filter = new RegExp(program.filter);
        } catch(e) {
            throw new CLIError(`Invalid filter "${program.filter}".`);
        }

        // Filter the tasks 
        tasks = tasks.filter(({ task }) => {
            if(filter) {
                // Apply the filter to the titles
                return task.title.match(filter);
            } else return true;
        });

        if(!program.list) {
            return TeamworkCLI.prompt([{
                type: "list",
                message: "Tasks",
                name: "task",
                choices: tasks.map(({ task, level }) => {
                    var taskTitle = task.print();
                    return {
                        name: level > 0 ? CHILD_NOTATION + taskTitle.split("\n").join("\n |  ") : taskTitle,
                        value: task
                    };
                })
            }]).then((answers) => {
                return TeamworkCLI.save(answers);
            }).then(() => {
                TeamworkCLI.done("Current task updated.");
            });
        } else {
            tasks.forEach(({ task, level }) => {
                TeamworkCLI.log((level > 0 ? CHILD_NOTATION : "") + task.print());
            });
        }
    });
});